Makefile

CC=g++

CFLAGs = -c -Wall

OUT= -o

EXENAME = runner

MF = mv

CP = cp

MD = mkdir -p

CPPDIR = CPP

HDIR = H

ODIR = O

all: move

move: compile movenow

compile: function1.o function2.o

function1.o:
	$(CC) $(CFLAGs) pgms/servvv.cpp
     
function2.o:
	$(CC) $(CFLAGs) pgms/clieee.cpp

movenow: file.cpp file.h file.o

file.cpp: makecppdir
	$(CP) *.cpp $(CPPDIR)\
        
makecppdir:
	$(MD) $(CPPDIR)

file.h: makehdir
	$(CP) *.h $(HDIR)\

makehdir:
	$(MD) $(HDIR)

file.o: makeodir makeexe
	$(CP) *.o $(ODIR)\

makeodir:
	$(MD) $(ODIR)

makeexe:
	$(CC) *.o $(OUT) $(EXENAME)

clean:
	rm *.o *.h *.cpp
  
  
 servvv.cpp
 
 
 #include<stdio.h>
#include <iostream>
#include <string>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <netdb.h>
#include <sys/uio.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <fstream>

using namespace std;

class server 
{
     public :
	     struct message
	     {
	        int size;
	        char msg[1000];
	     }m2;

	      int port;
              int socdes;
              int bindsock;
              int accsock;


              char buffer[1000];
	      char buffer1[2000]= {0};
	      char tempbuff[1000];

	      int offset=1;
	      int iniden;
	      int i;
	      int si = 0;

	      char identi;
	      char len[5];

	      signed int msgwrit;

	       void connectsoc(int p)
               {
                 port = p;
                 sockaddr_in servSoc;
                 servSoc.sin_family = AF_INET;
                 servSoc.sin_addr.s_addr = htonl(INADDR_ANY);
                 servSoc.sin_port = htons(port);

                 //creating socket descriptor
                 socdes = socket(AF_INET,SOCK_STREAM,0);
                 if(socdes < 0)
                 {
                         cout<<"unable to create socket.."<<endl;
                         exit(0);
                 }
                 
		 //binding
                 bindsock = bind(socdes, (struct sockaddr*)&servSoc,sizeof(servSoc));

                 if(bindsock < 0)
                 {
                         cout<<"unable to bind socket.."<<endl;
                         exit(0);
                 }

                 cout<<"socket connected and binded."<<endl;
		 
		 //listening
		 listen(socdes,5);

                 sockaddr_in newSock;
                 socklen_t lensock = sizeof(newSock);

		 //accepting
                 accsock = accept(socdes,(struct sockaddr*)&newSock,&lensock);
                 if(accsock < 0)
                 {
                         cout<<"unable to accept the client."<<endl;
                         exit(1);
                 }
                 

		 //receiving
                 while(true)
		 {
                         memset(buffer,0,sizeof(buffer));
                         recv(accsock,(char*)&buffer,sizeof(buffer),0);
			 
			 //copying char identifier to int iniden
			 memcpy(&identi,&buffer[0],sizeof(identi));
			 iniden = identi - '0';

			 //copying remaining size and msg to struct m2
			 memcpy(&m2,&buffer[1],sizeof(m2));

			 //converting int size to char len
			 sprintf(len,"%d",m2.size);

			 //copying size to tempbuffer
			 memcpy(&tempbuff,len,sizeof(len));

			 //concatenating size and msg to tempbuff
			 strcat(tempbuff,m2.msg);

			 //identifying char written in tempbuff to increase offset
			 si += strlen(tempbuff);

			 //storing tempbuff to new buffer1 
			 strcat(buffer1,tempbuff);
			
			 cout<<"identifier        : "<<identi<<endl;
                         cout<<"buffer message    : "<<buffer1<<endl;
	                 cout<<"length of rcd msg : ";
			 for(i=0;i<iniden;i++)
			       cout<<tempbuff[i];
			 cout<<"\n";

			 //after receiving first msg make tempbuff empty
			 memset(tempbuff,0,sizeof(tempbuff));          
	              
			 cout<<"Received message  : ";
			 msgwrit = strlen(buffer1);

			 if(strlen(len)<2)
			 {
                           for(i= offset;i<=msgwrit;i++)
			        cout<<buffer1[i];
			 }
			 else
			 {
				 for(i=offset+1;i<=msgwrit;i++)
					 cout<<buffer1[i];
			 }
			 cout<<"\n";

			 //increasing offset
			 offset = offset + strlen(len) + strlen(m2.msg);
                         cout<<"offset            : "<<offset<<endl;
			 cout<<"\n";

                        	 
		 }
                 close(accsock);
		 close(socdes);
	       }


};


int main(int argc, char *argv[])
{
        if(argc != 2)
                cout<<"invalid input..."<<endl;

        server s;
        s.connectsoc(atoi(argv[1]));
        return 0;
}


clieee.cpp

#include <iostream>
#include <string>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <netdb.h>
#include <sys/uio.h>
#include <sys/time.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <fstream>
using namespace std;

class client
{


        public :
                struct message
		{
			int size;
			char msg[1000];
		}m1;

		int port;
                const char *serIp;
                int clientSd;
                int conn;

                char buffer[1000];
                char sizeinchar[10];

                int identifier;

        	 void connectsoc(const char*sip,int p)
                 {
                         struct hostent* host = gethostbyname(sip);
                         port =p;

                         sockaddr_in saddr;
                         saddr.sin_family = AF_INET;
                         saddr.sin_addr.s_addr =inet_addr(inet_ntoa(*(struct in_addr*)*host->h_addr_list));
                         saddr.sin_port = htons(port);

			 //connecting to server
                         clientSd = socket(AF_INET,SOCK_STREAM,0);
                         conn = connect(clientSd,(sockaddr*)&saddr,sizeof(saddr));
                         if(conn <0)
                         {
                                 cout<<"socket not connected.."<<endl;
                         }
                         cout<<"conncected to server.."<<endl;

			 //sending msgs
			 while(true)
			 {
         			 cout<<"enter the message:";
	         		 cin>>m1.msg;
		        	 m1.size = strlen(m1.msg);

				 //converting int size to char
			         sprintf(sizeinchar,"%d",m1.size);
                                  if( strlen(sizeinchar) == 1)
				  {
					  //copying identifier byte 1 to buffer
					  memcpy(buffer,"1",1);
				  }
				  else if(strlen(sizeinchar) == 2)
				  {
					  //copying identifier byte 2 to buffer
					  memcpy(buffer,"2",1);
				  }
                                 
				 //copying size and msg from 2nd position of buffer
				 memcpy(buffer+1,(char*)&m1, sizeof(m1));    
                                 send(clientSd,(char*)&buffer,sizeof(buffer),0);
			 }
                         cout<<"sent"<<endl;
			 close(clientSd);
	          }
};

int main(int argc, char *argv[])
{
         if(argc != 3)
           cout<<"invalid input!!!"<<endl;

        client c;
        c.connectsoc(argv[1],atoi(argv[2]));
        return 0;
}

 
